/***************************************************************************
 *   Copyright (C) 2011 by Marco Beccuti   *
 *   beccuti@di.unito.it   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef __CON_H__
	#define __CON_H__
	#include "const.h"
#endif

#ifndef __CNF_H__
	#define __CNF_H__
	#include "conf.h"
#endif


#ifndef __FSTREAM__
	#define __FSTREAM__
	#include <fstream>
#endif

#ifndef __IOS_H__
	#define __IOS_H__
	#include <iostream>
#endif 


#ifndef __STDL__
	#define __STDL__
	#include <stdlib.h>
#endif



#ifndef __CMB_H__
	#define __CMB_H__
	#include "classMybitsetChar.h"
#endif



#ifndef __LMT_H__
	#define __LMT_H__
	#include <limits.h>
#endif




namespace Cl_HASH
{
using namespace  MYBIT;
using namespace std;






class HASHCH{

private:
//!Hash table
unsigned int * HashVec;
//!Collisions' list
mybitset * ListCol;
//!Hash table size 
unsigned int SizeHash;
//!Whole Collisions' list size.
//unsigned int mod;
unsigned int SizeList;
//!Number of elements in the hash table
unsigned int NumEl;
//!Counting vector
int VCount[POOLS]; 
public:
	//!Empty Constructor.
	HASHCH(){
	HashVec=NULL;
	SizeHash=0;
	 SizeList=0;
	NumEl=0;
	};
	
	//!Constructor. It takes in input the Hash table size.
	HASHCH(const unsigned int sizeHash, const unsigned int sizeList){
	this->SizeHash=sizeHash;
	this->SizeList=sizeList;
	NumEl=0;
	HashVec=(unsigned int*)malloc(SizeHash*sizeof(unsigned int));
	for (unsigned int i=0;i<SizeHash;i++)
		{
		HashVec[i]=DEFAULTP;
		}
	//memset(HashVec,DEFAULTP, SizeHash*sizeof(unsigned long) );
	ListCol=(mybitset*)malloc(SizeList*sizeof(mybitset));
	memset(VCount,0, POOLS*sizeof(int) );
	};
	//!It removes the allocated memory
	~HASHCH(){
	free(HashVec);
	free(ListCol);
	}
	
	//!It updates the hash size
	void UpdateHash(const unsigned int& sizeHash,const unsigned int& sizeList){
	this->SizeHash=sizeHash;
	this->SizeList=sizeList;
	HashVec=(unsigned int*)malloc(SizeHash*sizeof(unsigned int));
	for (unsigned int i=0;i<SizeHash;i++)
		{
		HashVec[i]=DEFAULTP;
		}
	//memset(HashVec,DEFAULTP, SizeHash*sizeof(unsigned long) );
	ListCol=(mybitset*)malloc(SizeList*sizeof(mybitset));
	memset(VCount,0, POOLS*sizeof(int) );
	};

	
	//!Hash function. It takes in input a integer value.
	inline unsigned int hash(const unsigned long long& value){
	//return (H(value)) % SizeHash;
	register unsigned  long long u=value;
	register unsigned  long long v=value>>32;
	return (((u*2+v)*A)%L)%SizeHash;
	//return ((u*2+v)*A)%SizeHash;
	//return (value%L) % SizeHash;
	};

 	//!It inserts the input value in the hash table, using chaining.  
	inline void insert(mybitset& b,const unsigned int& pool){
	unsigned int probe = hash(b.trans());
	unsigned int  tmpInext = HashVec[probe];
	HashVec[probe] = NumEl;
	ListCol[NumEl]=b;
        ListCol[NumEl].Inext = tmpInext;
	NumEl++;
	if (NumEl>SizeList)
		{
		cerr << "\n*****Error the number of elements ("<<NumEl <<")is bigger then list entries *****" << endl;
		exit(EXIT_FAILURE);
		}
	};
	
	//!It seach all the element in the current hash table in the input hash table. It returns a bitset of size POOLS. 
	bitset <POOLS> search(HASHCH  & sh){
	bitset <POOLS> p;
#if CORRECTION
	unsigned int fv[POOLS]={0};
	unsigned int w=0;
#endif
	int count=0;
	for (unsigned int i=0;i<SizeHash;i++)
		{
		unsigned int tmpInext = HashVec[i];
    		while(tmpInext !=DEFAULTP)
			{
#if SEARCHNORMAL
			int res= sh.search(ListCol[tmpInext]);
#else
			int res= sh.searchAndmove(ListCol[tmpInext]);
#endif
			//if ((res<TWINDOW)&&(res>0))
			if ((res==TW1)||(res==TW2)||(res==TW3)||(res==TW4)||(res==TW5)||(res==TW6)||(res==TW7)||(res==TW8))
				{
#if CORRECTION
				ListCol[tmpInext].unionPV(p,fv);
				w++;
#else
				ListCol[tmpInext].unionPV(p);
#endif
				if (p.count()>TREAD)
					{
					resetHT(i);
					p.reset();
					return p;
					}
				}
        		 tmpInext= ListCol[tmpInext].Inext;
    			}
		HashVec[i]=DEFAULTP;
		}
#if CORRECTION
	w=(double)w*TCOR;
	corr(p,fv,w);
#endif
	count=p.count();
	if (count!=0)
		VCount[count-1]++;
	NumEl=0;
    	return p;
	};
	
	//!It resets the hash table from index position and sets NumEl to 0
	inline void resetHT(unsigned int index){
	NumEl=0;
	for (unsigned i=index;i<SizeHash;i++)
		HashVec[i]=DEFAULTP;
	}

	//!It searches  a value in the hash table  and if it is found then it copies in b the pool bitvector
	inline int search(mybitset& b){
	unsigned int tmpInode = HashVec[hash(b.trans())];
    	while(tmpInode !=DEFAULTP)
		{
        	if(ListCol[tmpInode]==b) 
			{
			return ListCol[tmpInode].copy(b);
			}
        	tmpInode= ListCol[tmpInode].Inext;
    		}
    	return 0;
	};

	//!It searches  a value in the hash table and if it is found then it copies in b the pool bitvector
	inline int searchAndmove(mybitset& b){
	unsigned int probe=hash(b.trans());
	if (HashVec[probe]==DEFAULTP)
		return 0;
	unsigned int tmpInode = HashVec[probe],tmpInode2;
	if(ListCol[tmpInode]==b) 
			{
			return ListCol[tmpInode].copy(b);
			}
    	while(ListCol[tmpInode].Inext !=DEFAULTP)
		{
		tmpInode2=ListCol[tmpInode].Inext;
        	if(ListCol[tmpInode2]==b) 
			{
			ListCol[tmpInode].Inext=ListCol[tmpInode2].Inext;
			ListCol[tmpInode2].Inext= HashVec[probe];
			HashVec[probe]=tmpInode2;
			return ListCol[tmpInode2].copy(b);
			}
		tmpInode=tmpInode2;
    		}
    	return 0;
	};
	//!It searches  a value in the hash table and if it is found then it updates the pool bitvector.
	bool searchAndmoveSetPool(mybitset& b,const int pool){
	unsigned int probe=hash(b.trans());
	if (HashVec[probe]==DEFAULTP)
		return false;
	unsigned int tmpInode = HashVec[probe],tmpInode2;
	if(ListCol[tmpInode]==b) 
			{
			ListCol[tmpInode].setVP(pool);
			return true;
			}
    	while(ListCol[tmpInode].Inext !=DEFAULTP)
		{
		tmpInode2=ListCol[tmpInode].Inext;
        	if(ListCol[tmpInode2]==b) 
			{
			ListCol[tmpInode].Inext=ListCol[tmpInode2].Inext;
			ListCol[tmpInode2].Inext= HashVec[probe];
			HashVec[probe]=tmpInode2;
			ListCol[tmpInode2].setVP(pool);
#if REPET
			ListCol[tmpInode2].inc();
#endif
			return true;
			}
        	tmpInode=tmpInode2;
    		}
    	return false;
	};


	//!It searches  a value in the hash table if it is found then it updates the pool
	inline bool searchSetPool(mybitset& b,const int pool){
	
	unsigned int tmpInode = HashVec[hash(b.trans())];
    	while(tmpInode !=DEFAULTP)
		{
        	if(ListCol[tmpInode]==b) 
			{
			ListCol[tmpInode].setVP(pool);
#if REPET
			ListCol[tmpInode].inc();
#endif
			return true;
			}
        	tmpInode = ListCol[tmpInode].Inext;
    		}
    	return false;
	};

	//!It prints the linked list stored in HashTable[row] in a file
	void printList(int row,ofstream& out){
	unsigned int tmpInode = HashVec[row];
    	while(tmpInode!=DEFAULTP)
		{
		out<<ListCol[tmpInode]<<endl;
		tmpInode = ListCol[tmpInode].Inext;
    		}
	};

	//!It prints the linked list stored in HashTable[row]
	void printList(int row){
	unsigned int  tmpInode = HashVec[row];
	if (tmpInode!=DEFAULTP)
		cout<<"\nHASH["<<row<<"]:\t"; 
    	while(tmpInode!=DEFAULTP)
		{
		cout<<ListCol[tmpInode]<<" ";
        	tmpInode = ListCol[tmpInode].Inext;
    		}
	};

	//!It prints the size of the linked list stored in HashTable[row]
	void printSize(int row){
	unsigned int tmpInode = HashVec[row];
	int i=0;
	if (tmpInode!=DEFAULTP)
		cout<<"\nHASH["<<row<<"]:\t"; 
    	while(tmpInode!=DEFAULTP)
		{
		i++;
        	tmpInode = ListCol[tmpInode].Inext;
    		}
	if (i>0)
		cout<<i<<endl;
	};

	//!It prints the whole HashTable in a file 
	void print(ofstream& out){
	for(unsigned int i=0;i<SizeHash;i++)
		{
        	printList(i,out);
		}
	};

	//!It prints the whole HashTable 
	void print(){
	for(unsigned int i=0;i<SizeHash;i++)
		{
#if DEBUG1
        	printList(i);
#endif
		printSize(i);
		}
	cout<<endl;
	};
	//!It returns the HASH size
	unsigned int size(){
	return NumEl;
	};
	//!It prints some statistical information on the Hash Table
	void info()
	{
	unsigned int hashentry=0;
	for (unsigned int i=0;i<SizeHash;i++)
		{
		if (HashVec[i]!=DEFAULTP)
			hashentry++;	
		}
	cout<<"Hash table buckets: "<<hashentry<<endl;
	cout<<"Avergage size of collisions list: "<<(double)NumEl/hashentry<<endl;
	}

	//!It prints the counting vector according to the following format: <number_of_pools>' ' <number_of_reads> 
	void PrintVCount(ofstream& out){
	for(unsigned int i=0;i<POOLS;i++)
		{
        	out<<i+1<<" "<<VCount[i]<<endl;
		}
	};

	//!It  uses the read pools frequency vector fv to derive the set of pools in which the read  is contained. In details, all the founded pools with frequency lower than the given threshold w are removed from p.
	inline void corr(bitset<POOLS>& p, unsigned int fv[],unsigned int w)
	{
	for(unsigned int i=0;i<POOLS;i++)
		{
		if ((p[i]==1)&&(fv[i]<w))
			{
			p[i]=0;
			}
		}
	}

	//!It takes in input the output file name and save on it (in binary format) the hash table.
	void Write(string output)
	{	
	FILE * pFile;
	string tmp=output+".hash";
  	pFile = fopen ( tmp.c_str(), "w" );
	if (pFile==NULL)
  		{
		cerr<<"\n*****Error opening output file .hash *****" << endl;
		exit(EXIT_FAILURE);
		}
	//write hash size
  	fwrite (&SizeHash, sizeof(SizeHash),1 , pFile );
	//write int vector
	fwrite (HashVec, sizeof(unsigned int), SizeHash, pFile );
  	fclose (pFile);
	cout<<"Hash table saved in:\n\t"<<tmp<<endl;
	tmp=output+".collist";
	pFile = fopen ( tmp.c_str(), "w" );
	//write collisions list size
	fwrite (&SizeList, sizeof(SizeList), 1, pFile );
	//write number of elements
	fwrite (&NumEl, sizeof(NumEl), 1, pFile );
	//write myclassbit vector
	fwrite (ListCol, sizeof(mybitset), SizeList, pFile );
	fclose (pFile);
	cout<<"Collisions' list saved in:\n\t"<<tmp<<endl;
	};

	//!It takes in input the intput file name and updates the hash table
	bool Read(string output)
	{
	FILE * pFile;
	string tmp=output+".hash";
  	pFile = fopen ( tmp.c_str(), "r" );
	if (pFile==NULL)
  		{
		cerr<<"\n*****Error opening input file .hash *****" << endl;
		cout<<"\nHash Table binary encoding not found!"<<endl;
		return false;
		}
	//write hash size
  	fread (&SizeHash, sizeof(SizeHash),1 , pFile );
	HashVec=(unsigned int*)malloc(SizeHash*sizeof(unsigned int));	
	//write int vector
	fread (HashVec, sizeof(unsigned int), SizeHash, pFile );
  	fclose (pFile);
	tmp=output+".collist";
	pFile = fopen ( tmp.c_str(), "r" );
	if (pFile==NULL)
  		{
		cerr<<"\n*****Error opening input file .hash *****" << endl;
		cout<<"\nHash Table binary encoding not found!"<<endl;
		return false;
		}
	//write collisions list size
	fread (&SizeList, sizeof(SizeList), 1, pFile );
	//write number of elements
	fread (&NumEl, sizeof(NumEl), 1, pFile );
	//write myclassbit vector
	ListCol=(mybitset*)malloc(SizeList*sizeof(mybitset));
	fread (ListCol, sizeof(mybitset), SizeList, pFile );
// 	for (int j=0;j<SizeList;j++)
// 		cout<<"["<<j<<"]"<<ListCol[j]<<endl;
	fclose (pFile);
	cout<<"\n\tHash Table encoding found";
	return true;
	}

	void CountW(unsigned int WCount[]){
	bitset <POOLS> p;
	int j=0;
	for(unsigned int i=0;i<NumEl;i++)
		{
		p.reset();
		ListCol[i].unionPV(p);
		if ((j=p.count())>0)
			WCount[j-1]++;
		}
	};
#if REPET
// 	void CountR(unsigned int RCount[],unsigned int RCount1[]){
// 	bitset <POOLS> p;
// 	int j=0;
// 	char buffer[MAXSIZE];
// 	for(unsigned int i=0;i<NumEl;i++)
// 		{
// 		p.reset();
// 		ListCol[i].unionPV(p);
// 		if (((j=p.count())>0)&&(ListCol[i].getCW()>CUT))
// 			{
// 			RCount[j-1]+=ListCol[i].getCW();
// 			RCount1[j-1]++;
// 			}
// 		if (j==8)
// 			{
// 			buffer[0]='\0';
// 			ListCol[i].bit2buffer(buffer);
// 			cout<<buffer<<endl;
// 			}
// 		}
// 	};
	
 	void CountR(ofstream& out,unsigned long long* count){
  	int j=0;
	double max=0;
 	double min=MAXFREQ;
 	double val=0.0;
	unsigned long long maxpool=0;
	int POOL=1;
	for (int i=0;i<POOLS;i++)
		if (maxpool<count[i])
			maxpool=count[i]; 
  	for(unsigned int i=0;i<NumEl;i++)
  		{ 		
  		j=ListCol[i].count();
  		if ((j<=NUMC)&&(j==POOL))
  			{
 			ostringstream out1;
 			out1<<ListCol[i];
 			double  sum=0.0;
			max=0;
			min=MAXFREQ;
			int jj=0;
			for (int kk=0;(kk<POOLS&&jj<POOL);kk++)
				{
				if (ListCol[i].getVP(kk)==1)
					{
					val=(((double)ListCol[i].getCW(jj))/count[kk])*maxpool;
					sum+=val;
 					if (val > max)
 						max=val;
 					if (val < min)
 						min =val;
  			 		out1<<val<<" ";
					jj++;
					}
				}
 			sum=sum/j;
 			out1<<"$"<<sum<<"$"<<max/min;
 			//double mm=sum*0.6;
 			//if ((max<sum+mm)&&(sum-mm<min))
 			//	{
 				out<<out1.str()<<endl;
 			//	}
  			}
  		}
  	};

/* 
	void CountR(ofstream& out){
 	int j=0;
	unsigned int max=0;
	unsigned int min=MAXFREQ;
	unsigned int val=0;
	unsigned int cc[200];
	memset(cc,0, 200*sizeof(int) );
 	for(unsigned int i=0;i<NumEl;i++)
 		{ 		
 		j=ListCol[i].count();
 		if ((j<=NUMC)&&(j==7))
 			{
			//ostringstream out1;
			//out1<<ListCol[i];
			max=0;
			min=MAXFREQ;
			double  sum=0.0;
 			for (int jj=0;jj<j;jj++)
				{
				val=ListCol[i].getCW(jj);
				if (val > max)
					max=val;
				if (val < min)
					min =val;
 			 	//out1<<val<<" ";
				}
			//if (max=>200)
			//	{
				sum=max/min;
				int k=(int)sum/2;
				if (k>199)
					k=199;
				cc[k]++;
				//}
	
 			}
 		}
	for (int ll=0;ll<200;ll++)
		{
		out<<ll<<" "<<cc[ll]<<endl;
		}
 	};
*/
/*
	void CountR(ofstream& out){
 	int j=0;
	unsigned int val=0;
	unsigned int low[NUMC];
	unsigned int high[NUMC];
	unsigned int tot[NUMC];
	unsigned int max=0;
	memset(low,0, NUMC*sizeof(unsigned int) );
	memset(high,0, NUMC*sizeof(unsigned int) );
	memset(tot,0, NUMC*sizeof(unsigned int) );
 	for(unsigned int i=0;i<NumEl;i++)
 		{ 		
 		j=ListCol[i].count();
 		if ((j<=NUMC))
 			{
			//ostringstream out1;
			//out1<<ListCol[i];
			max=0;
 			for (int jj=0;jj<j;jj++)
				{
				val=ListCol[i].getCW(jj);
				if (val > max)
					max=val;
				}
			tot[j-1]++;
			if (max>=100)
				{
				high[j-1]++;
				}
			else
				{
				low[j-1]++;
				}	
 			}
 		}
	for (int ll=0;ll<NUMC;ll++)
		{
		out<<ll<<"\t"<<low[ll]<<"\t"<<high[ll]<<"\t"<<low[ll]+high[ll]<<"\t"<<tot[ll]<<endl;
		}
 	};
*/

/*
	void CountR(ofstream& out){
 	int j=0;
	unsigned int val=0;
	unsigned int low[NUMC];
	unsigned int high[NUMC];
	unsigned int tot[NUMC+1];
	unsigned int num=0;
	memset(low,0, NUMC*sizeof(unsigned int) );
	memset(high,0, NUMC*sizeof(unsigned int) );
	memset(tot,0, NUMC+1*sizeof(unsigned int) );
 	for(unsigned int i=0;i<NumEl;i++)
 		{ 		
 		j=ListCol[i].count();
 		if ((j<=NUMC)&&(j==7))
 			{
			//ostringstream out1;
			//out1<<ListCol[i];
			
			num=0;
 			for (int jj=0;jj<j;jj++)
				{
				val=ListCol[i].getCW(jj);
					
				if (val < 40)
					num++;
				}
			tot[num]++;	
 			}
 		}
	for (int ll=0;ll<NUMC+1;ll++)
		{
		out<<ll<<" "<<tot[ll]<<endl;
		}
 	};
*/
void mutation(char* buffer,const mybitset& a,class HASHCH& rd,ofstream& out,unsigned long long* count,unsigned long long& maxpool){
	char l[4]={'A','C','G','T'};
	char tmp;
	class mybitset b,d;
	for (int i=0;i<DIM;i++)
		{
		for (int k=0;k<3;k++)
			if (buffer[i]!=l[k])
				{
				tmp=buffer[i];
				buffer[i]=l[k];
				int z=0;
				int j=DIM*2-1;
				for (int c = 0; c<DIM; c++) 
					{
              				switch (buffer[c])
						{
						case 'A':
							b.set(z,0);
							z++;
							b.set(z,0);
							z++;
							d.set(j,1);
							j--;
							d.set(j,1);
							j--;
						break;
						case 'C':
							b.set(z,0);
							z++;
							b.set(z,1);
							z++;
							d.set(j,0);
							j--;
							d.set(j,1);
							j--;
						break;
						case 'G':
							b.set(z,1);
							z++;
							b.set(z,0);
							z++;
							d.set(j,1);
							j--;
							d.set(j,0);
							j--;
						break;
						case 'T':
							b.set(z,1);
							z++;
							b.set(z,1);
							z++;
							d.set(j,0);
							j--;
							d.set(j,0);
							j--;
						break;
						default:
							cerr<<"Error processing window"<<endl<<endl;
							exit(EXIT_FAILURE);
						}
					}
					z=0;
					if (d<b)
						{
						rd.insert(d,z);
						}
					else
						{
						rd.insert(b,z);
						}
				buffer[i]=tmp;
				}
		}
	if (rd.size()!=0)
 			rd.searchErr(a,this,out,count,maxpool);
	}

//!This function is used to generate windows' corrections.
void Corretion(ofstream& out,unsigned long long* count){
	unsigned long long maxpool=0;
	int POOL=2;
	double val=0.0;
	for (int i=0;i<POOLS;i++)
		if (maxpool<count[i])
			maxpool=count[i]; 
	for(unsigned int i=0;i<NumEl;i++)
  		{ 		
  		int j=ListCol[i].count();
  		if ((j<=NUMC)&&(j==POOL))
  			{
 			out<<">"<<j<<"_"<<ListCol[i]<<"$";
			int jj=0;
			for (int kk=0;(kk<POOLS&&jj<POOL);kk++)
				{
				if (ListCol[i].getVP(kk)==1)
					{
					val=(((double)ListCol[i].getCW(jj))/count[kk])*maxpool;
  			 		out<<val<<" ";
					jj++;
					}
				}
			out<<endl;
			char buffer[DIM+1];
			ListCol[i].bit2buffer(buffer);
			HASHCH rd;
			rd.UpdateHash(DIM*3,DIM*3);
			mutation(buffer,ListCol[i],rd,out,count,maxpool);
			out<<"\\"<<endl;
			}
		}
	}

	//!It seach all the element in the current hash table in the input hash table. It print in out the found elements 
	void searchErr(const mybitset& original,HASHCH* sh,ofstream& out,unsigned long long* count,unsigned long long& maxpool){
	bitset <POOLS> p;
	for (unsigned int i=0;i<SizeHash;i++)
		{
		unsigned int tmpInext = HashVec[i];
    		while(tmpInext !=DEFAULTP)
			{
			
			sh->search(original,ListCol[tmpInext],out,count,maxpool);
        		tmpInext= ListCol[tmpInext].Inext;
    			}
		HashVec[i]=DEFAULTP;
		}
	};
	
	//!It searches  a value in the hash table  and if it is found then it copies in b the pool bitvector
	inline int search(const mybitset& original, mybitset& b,ofstream& out,unsigned long long* count,unsigned long long& maxpool){
	unsigned int tmpInode = HashVec[hash(b.trans())];
	int POOL=5;
	double val=0.0;
    	while(tmpInode !=DEFAULTP)
		{
        	if((ListCol[tmpInode]==b)&&(ListCol[tmpInode].count()<=POOL))//&&((ListCol[tmpInode].EmptyIntersection(original)))) 
			{
			out<<">"<<ListCol[tmpInode].count()<<"_"<<ListCol[tmpInode].count(original)<<"_"<<ListCol[tmpInode]<<"\n$";
			int jj=0;
			for (int kk=0;(kk<POOLS&&jj<POOL);kk++)
				{
				if (ListCol[tmpInode].getVP(kk)==1)
					{
					val=(((double)ListCol[tmpInode].getCW(jj))/count[kk])*maxpool;
  			 		out<<val<<" ";
					jj++;
					}
				}
			out<<endl;
			return 1;
			}
        	tmpInode= ListCol[tmpInode].Inext;
    		}
    	return 0;
	};

#endif

};




};


